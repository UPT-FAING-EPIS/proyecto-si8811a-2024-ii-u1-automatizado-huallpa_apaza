name: Build and Push Docker Images

on:
  push:
    branches:
      - automatizacion  # Ajusta esto según la rama desde la cual quieres activar el pipeline

jobs:
  build-images:
    runs-on: ubuntu-latest
 
    steps:
      # Checkout el primer repositorio con el Dockerfile
      - name: Checkout the repository with the Dockerfile
        uses: actions/checkout@v3
        with:
          repository: UPT-FAING-EPIS/proyecto-si8811a-2024-ii-u1-desarrollo-api-back
          ref: desarrollo  # La rama donde se encuentra el Dockerfile de la aplicación

      # Login en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Build y push de la imagen 'latest' para el primer repositorio
      - name: Build Docker image for application
        run: |
          docker build -t palbertt/automatizacion:latest .

      - name: Push Docker image for application
        run: |
          docker push palbertt/automatizacion:latest

      # Checkout el segundo repositorio con el Dockerfile
      - name: Checkout the pruebas repository
        uses: actions/checkout@v3
        with:
          repository: UPT-FAING-EPIS/proyecto-si8811a-2024-ii-u1-pruebas-cano-valverde
          ref: feature/feature_pruebas  # La rama para construir la segunda imagen

      # Verifica si Dockerfile existe en el segundo repositorio
      - name: Verify Dockerfile presence
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Dockerfile not found in the repository!"
            exit 1
          fi

      # Build y push de la imagen 'Pruebas-Selenium' para el segundo repositorio
      - name: Build Docker image for pruebas branch
        run: |
          docker build -t palbertt/automatizacion:Pruebas-Selenium .

      - name: Push Docker image for pruebas branch
        run: |
          docker push palbertt/automatizacion:Pruebas-Selenium
