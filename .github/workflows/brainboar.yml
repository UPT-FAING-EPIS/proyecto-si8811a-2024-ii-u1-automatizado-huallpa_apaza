name: Generate Infrastructure Diagram

on:
  push:
    branches:
      - DesarrolloApiBack

jobs:
  generate-diagram:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the main repository
        uses: actions/checkout@v3

      - name: Checkout the Terraform repository
        uses: actions/checkout@v3
        with:
          repository: UPT-FAING-EPIS/proyecto-si8811a-2024-ii-u1-desarrollo-api-back
          path: terraform_repo
          ref: develop

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          python -m pip install --upgrade pip
          pip install diagrams python-hcl2

      - name: Generate Diagram from Terraform Files
        run: |
          echo "
          import os
          import hcl2
          from diagrams import Diagram
          from diagrams.aws.compute import EC2
          from diagrams.aws.database import RDS
          from diagrams.aws.network import ELB

          with Diagram('Infrastructure Diagram', show=False, filename='infra_diagram', outformat='png'):
              resources = []

              # Recorrer archivos Terraform
              for root, _, files in os.walk('terraform_repo'):
                  for file in files:
                      if file.endswith('.tf'):
                          with open(os.path.join(root, file), 'r') as f:
                              terraform_data = hcl2.load(f)
                              for resource in terraform_data.get('resource', []):
                                  for resource_type, instances in resource.items():
                                      for instance_name, instance_data in instances.items():
                                          if resource_type == 'aws_instance':
                                              resources.append(EC2(instance_name))
                                          elif resource_type == 'aws_db_instance':
                                              resources.append(RDS(instance_name))
                                          elif resource_type == 'aws_elb':
                                              resources.append(ELB(instance_name))

              # Conectar recursos en el diagrama (ejemplo simple)
              for i in range(len(resources) - 1):
                  resources[i] >> resources[i + 1]
          " > generate_diagram.py
          python generate_diagram.py

      - name: Commit and Push Diagram
        run: |
          git config --local user.name "jesus huallpa"
          git config --local user.email "jh2021071085@virtual.upt.pe"
          git add infra_diagram.png
          git commit -m "Agregar diagrama de infraestructura en PNG" || echo "No hay cambios para commit"
          git push origin DesarrolloApiBack

      - name: Upload Diagram as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: infra_diagram
          path: infra_diagram.png
