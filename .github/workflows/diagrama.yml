name: Generate README.md

on:
  push:
    branches:
      - DesarrolloApiBack

jobs:
  generate-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the main repository
        uses: actions/checkout@v3

      - name: Checkout the Terraform repository
        uses: actions/checkout@v3
        with:
          repository: UPT-FAING-EPIS/proyecto-si8811a-2024-ii-u1-desarrollo-api-back
          path: terraform_repo  # Directorio donde se clonará el repo
          ref: develop  # Rama donde están los archivos TF

      - name: Install Terraform
        run: |
          curl -LO https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip
          unzip terraform_1.0.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz python3-pip

      - name: Clone Terravision Repository
        run: |
          git clone https://github.com/patrickchugh/terravision.git
          cd terravision
          chmod +x terravision
          export PATH=$PATH:$(pwd)

      - name: Disable AWS and MongoDB Providers
        run: |
          cd terraform_repo
          # Comentar proveedores de AWS y MongoDB
          find . -type f -name "*.tf" -exec sed -i '/provider "aws" {/,/}/ s/^/#/' {} \;
          find . -type f -name "*.tf" -exec sed -i '/provider "mongodbatlas" {/,/}/ s/^/#/' {} \;
          
          # Comentar todos los recursos que comiencen con aws_ o mongodbatlas_
          find . -type f -name "*.tf" -exec sed -i '/resource "aws_.*" {/,/}/ s/^/#/' {} \;
          find . -type f -name "*.tf" -exec sed -i '/resource "mongodbatlas_.*" {/,/}/ s/^/#/' {} \;

      - name: Generate Terraform Plan
        run: |
          cd terraform_repo
          terraform init
          terraform validate
          terraform plan -out=tfplan \
            -var="api_gateway_name=nombre_api_gateway" \
            -var="flutter_app_bucket_name=nombre_flutter_app_bucket" \
            -var="grafana_cloud_api_key=tu_grafana_api_key" \
            -var="mongodb_atlas_org_id=tu_org_id" \
            -var="mongodb_atlas_private_key=tu_mongodb_private_key" \
            -var="mongodb_atlas_public_key=tu_mongodb_public_key" \
            -var="mongodb_cluster_name=nombre_mongodb_cluster" \
            -var="mongodb_database_name=nombre_mongodb_database" \
            -var="mongodb_password=tu_mongodb_password" \
            -var="mongodb_project_name=nombre_mongodb_project" \
            -var="mongodb_username=tu_mongodb_username" \
            -var="react_app_bucket_name=nombre_react_app_bucket" \
            -var="ec2_key_name=nombre_de_tu_clave"
          terraform show -json tfplan > tfplan.json

      - name: Run Terravision to Generate Diagram
        run: |
          cd terravision
          ./terravision draw --source ../terraform_repo --output diagram.png
          mv diagram.png ../

      - name: Generate README.md
        run: |
          echo "# DIAGRAMAS " > README.md
          echo "" >> README.md
          echo "En esta rama se generan los diagramas de infraestructura del repositorio proyecto-si8811a-2024-ii-u1-desarrollo-api-back y develop, la rama donde están los archivos TF." >> README.md
          echo "" >> README.md

          # Añade el diagrama al README.md
          echo "## Diagrama de Infraestructura" >> README.md
          echo "![Diagrama de Infraestructura](diagram.png)" >> README.md
          echo "" >> README.md

          # Añade la estructura de archivos y lista de recursos como antes
          
          echo "## Estructura de Archivos" >> README.md
          echo '```mermaid' >> README.md
          echo "graph TD;" >> README.md
          
          # Añadir las carpetas al diagrama
          find terraform_repo -type d | while read dir; do
            dir_name=$(basename "$dir")
            parent_dir=$(dirname "$dir" | xargs basename)
            if [ "$parent_dir" != "." ]; then
              echo "    $parent_dir --> $dir_name" >> README.md
            else
              echo "    Root --> $dir_name" >> README.md
            fi
          done
          
          # Añadir los archivos al diagrama
          find terraform_repo -type f | while read file; do
            file_name=$(basename "$file")
            dir_name=$(dirname "$file" | xargs basename)
            echo "    $dir_name --> $file_name" >> README.md
          done
          
          echo '```' >> README.md
          echo "" >> README.md
          
          # Lista de archivos .tf y recursos
          echo "## Archivos Terraform Analizados" >> README.md
          tf_files=""
          for file in $(find terraform_repo -name "*.tf"); do
            tf_files="$tf_files\n- $file"
          done
          echo -e "$tf_files" >> README.md
          
          echo "## Recursos Utilizados" >> README.md
          echo "- MongoDB" >> README.md
          echo "- Grafana" >> README.md
          echo "- Aplicaciones Web y Móviles" >> README.md
          echo "- API Backend" >> README.md

      - name: Commit and Push README.md
        run: |
          git config --local user.name "jesus huallpa"
          git config --local user.email "jh2021071085@virtual.upt.pe"
          git add README.md diagram.png
          git commit -m "Generar README.md y diagrama automáticamente" || echo "No hay cambios para commit"
          git push origin DesarrolloApiBack
