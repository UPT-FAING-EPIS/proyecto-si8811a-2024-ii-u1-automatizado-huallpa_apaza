name: Generate Infrastructure Diagram

on:
  push:
    branches:
      - DesarrolloApiBack

jobs:
  generate-diagram:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the main repository
        uses: actions/checkout@v3

      - name: Checkout the Terraform repository
        uses: actions/checkout@v3
        with:
          repository: UPT-FAING-EPIS/proyecto-si8811a-2024-ii-u1-desarrollo-api-back
          path: terraform_repo
          ref: develop

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          python -m pip install --upgrade pip
          pip install diagrams python-hcl2

      - name: Generate Diagram from Terraform Files
        run: |
          echo "
          import os
          import hcl2
          from diagrams import Diagram, Cluster
          from diagrams.aws.compute import EC2, Lambda
          from diagrams.aws.database import RDS, Elasticache
          from diagrams.aws.network import ELB, ALB, Route53
          from diagrams.aws.storage import S3
          from diagrams.aws.security import Shield, WAF
          from diagrams.aws.network import VPC, InternetGateway, NATGateway
          from diagrams.onprem.monitoring import Grafana
          from diagrams.onprem.database import MongoDB
          
          # Inicializa el diagrama
          with Diagram('Infrastructure Diagram', show=False, filename='infra_diagram', outformat='png'):
              # Listas para almacenar los recursos
              ec2_instances = []
              db_instances = []
              elb_instances = []
              alb_instances = []
              s3_buckets = []
              lambda_instances = []
              security_groups = []
              grafana_instances = []
              mongodb_instances = []
              nat_gateways = []
              internet_gateways = []
              route53_instances = []
              vpc_instances = []
              waf_instances = []

              print('Recorriendo los archivos Terraform...')

              # Recorre archivos Terraform
              for root, _, files in os.walk('terraform_repo'):
                  for file in files:
                      if file.endswith('.tf'):
                          print(f\"Procesando archivo: {file}\")
                          with open(os.path.join(root, file), 'r') as f:
                              try:
                                  terraform_data = hcl2.load(f)
                                  print(f\"Contenido de {file}: {terraform_data}\")
                                  for resource in terraform_data.get('resource', []):
                                      for resource_type, instances in resource.items():
                                          for instance_name, instance_data in instances.items():
                                              print(f\"Tipo de recurso detectado: {resource_type} - Nombre: {instance_name}\")
                                              # Procesa los recursos según su tipo
                                              if resource_type == 'aws_instance':
                                                  ec2_instances.append(EC2(instance_name))
                                              elif resource_type == 'aws_db_instance':
                                                  db_instances.append(RDS(instance_name))
                                              elif resource_type == 'aws_elb':
                                                  elb_instances.append(ELB(instance_name))
                                              elif resource_type == 'aws_alb':
                                                  alb_instances.append(ALB(instance_name))
                                              elif resource_type == 'aws_s3_bucket':
                                                  s3_buckets.append(S3(instance_name))
                                              elif resource_type == 'aws_lambda_function':
                                                  lambda_instances.append(Lambda(instance_name))
                                              elif resource_type == 'aws_security_group':
                                                  security_groups.append(Shield(instance_name))
                                              elif resource_type == 'grafana_cloud_stack':
                                                  grafana_instances.append(Grafana(instance_name))
                                              elif resource_type in ['mongodbatlas_project', 'mongodbatlas_cluster']:
                                                  mongodb_instances.append(MongoDB(instance_name))
                                              elif resource_type == 'aws_nat_gateway':
                                                  nat_gateways.append(NATGateway(instance_name))
                                              elif resource_type == 'aws_internet_gateway':
                                                  internet_gateways.append(InternetGateway(instance_name))
                                              elif resource_type == 'aws_route53_zone':
                                                  route53_instances.append(Route53(instance_name))
                                              elif resource_type == 'aws_vpc':
                                                  vpc_instances.append(VPC(instance_name))
                                              elif resource_type == 'aws_waf':
                                                  waf_instances.append(WAF(instance_name))
                                              else:
                                                  print(f\"Recurso no soportado: {resource_type}\")
                              except Exception as e:
                                  print(f\"Error al cargar {file}: {e}\")

              # Agrupar recursos en clústeres
              print('Agrupando recursos en clústeres...')

              with Cluster('Compute Instances'):
                  for instance in ec2_instances:
                      instance

              with Cluster('Database Instances'):
                  for db in db_instances:
                      db
                  for mongo in mongodb_instances:
                      mongo

              with Cluster('Load Balancers'):
                  for elb in elb_instances:
                      elb
                  for alb in alb_instances:
                      alb

              with Cluster('Storage'):
                  for bucket in s3_buckets:
                      bucket

              with Cluster('Lambda Functions'):
                  for lambda_func in lambda_instances:
                      lambda_func

              with Cluster('Security Groups'):
                  for sg in security_groups:
                      sg

              with Cluster('Gateways'):
                  for nat in nat_gateways:
                      nat
                  for igw in internet_gateways:
                      igw

              with Cluster('DNS & CDN'):
                  for r53 in route53_instances:
                      r53
                  for waf in waf_instances:
                      waf

              with Cluster('Monitoring'):
                  for grafana in grafana_instances:
                      grafana

              # Conectar recursos
              print('Conectando recursos...')
              
              # Conectar balanceadores de carga con instancias EC2
              for elb in elb_instances:
                  for ec2 in ec2_instances:
                      elb >> ec2

              for alb in alb_instances:
                  for ec2 in ec2_instances:
                      alb >> ec2

              # Conectar EC2 a las bases de datos
              for ec2 in ec2_instances:
                  for db in db_instances:
                      ec2 >> db
                  for mongo in mongodb_instances:
                      ec2 >> mongo

              # Conectar instancias EC2 a S3
              for ec2 in ec2_instances:
                  for bucket in s3_buckets:
                      ec2 >> bucket

              # Conectar Lambda a S3
              for lambda_func in lambda_instances:
                  for bucket in s3_buckets:
                      lambda_func >> bucket

              # Conectar instancias EC2 a los grupos de seguridad
              for ec2 in ec2_instances:
                  for sg in security_groups:
                      sg >> ec2

              # Conectar Grafana a bases de datos para monitoreo
              for grafana in grafana_instances:
                  for db in db_instances:
                      grafana >> db
                  for mongo in mongodb_instances:
                      grafana >> mongo

          " > generate_diagram.py
          python generate_diagram.py

      - name: Check if diagram was created
        run: |
          if [ -f "infra_diagram.png" ]; then
            echo "Diagrama generado exitosamente."
          else
            echo "Error: El archivo infra_diagram.png no fue generado."
            exit 1
          fi

      - name: List files in the current directory
        run: ls -alh

      - name: Commit and Push Diagram
        run: |
          git config --local user.name "jesus huallpa"
          git config --local user.email "jh2021071085@virtual.upt.pe"
          
          if [ -f "infra_diagram.png" ]; then
              git add infra_diagram.png
              git commit -m "Actualizar diagrama de infraestructura en PNG" || echo "No hay cambios para commit"
              git push origin DesarrolloApiBack --force
          else
              echo "Error: infra_diagram.png no se generó."
              exit 1
          fi


      - name: Upload Diagram as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: infra_diagram
          path: infra_diagram.png

